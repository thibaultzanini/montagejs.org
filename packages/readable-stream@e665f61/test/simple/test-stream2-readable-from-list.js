function test(e,t){count++,tests.push([e,t])}function run(){var e=tests.shift();if(!e)return console.error("ok");var t=e[0],n=e[1];console.log("# %s",t),n({same:assert.deepEqual,equal:assert.equal,end:function(){count--,run()}})}var assert=require("assert"),common=require("../common.js"),fromList=require("../../lib/_stream_readable")._fromList,tests=[],count=0;process.on("exit",function(){assert.equal(count,0)}),process.nextTick(run),test("buffers",function(e){var t=[new Buffer("foog"),new Buffer("bark"),new Buffer("bazy"),new Buffer("kuel")],n=fromList(6,{buffer:t,length:16});e.equal(""+n,"foogba"),n=fromList(2,{buffer:t,length:10}),e.equal(""+n,"rk"),n=fromList(2,{buffer:t,length:8}),e.equal(""+n,"ba"),n=fromList(100,{buffer:t,length:6}),e.equal(""+n,"zykuel"),e.same(t,[]),e.end()}),test("strings",function(e){var t=["foog","bark","bazy","kuel"],n=fromList(6,{buffer:t,length:16,decoder:!0});e.equal(n,"foogba"),n=fromList(2,{buffer:t,length:10,decoder:!0}),e.equal(n,"rk"),n=fromList(2,{buffer:t,length:8,decoder:!0}),e.equal(n,"ba"),n=fromList(100,{buffer:t,length:6,decoder:!0}),e.equal(n,"zykuel"),e.same(t,[]),e.end()});