function shouldWorkWithConstructor(e){function t(){return e([1,2,3])}function n(){var t=0;return e(function(){return t++})}it("should iterate an array",function(){var t=e([1,2,3]);expect(t.next()).toEqual(1),expect(t.next()).toEqual(2),expect(t.next()).toEqual(3),expect(function(){t.next()}).toThrow(),expect(function(){t.next()}).toThrow()}),it("should iterate an sparse array",function(){var t=[];t[0]=1,t[100]=2,t[1e3]=3;var n=e(t);expect(n.next()).toEqual(1),expect(n.next()).toEqual(2),expect(n.next()).toEqual(3),expect(function(){n.next()}).toThrow(),expect(function(){n.next()}).toThrow()}),it("should iterate a string",function(){var t=e("abc");expect(t.next()).toEqual("a"),expect(t.next()).toEqual("b"),expect(t.next()).toEqual("c"),expect(function(){t.next()}).toThrow(),expect(function(){t.next()}).toThrow()}),it("should gracefully fail to iterate null",function(){expect(function(){e(null)}).toThrow()}),it("should gracefully fail to iterate undefined",function(){expect(function(){e()}).toThrow()}),it("should gracefully fail to iterate a number",function(){expect(function(){e(42)}).toThrow()}),it("should gracefully pass an existing iterator through",function(){var t=e([1,2,3]);t=e(t),expect(t.next()).toEqual(1),expect(t.next()).toEqual(2),expect(t.next()).toEqual(3),expect(function(){t.next()}).toThrow(),expect(function(){t.next()}).toThrow()}),it("should iterate an iterator",function(){var t=e({iterate:function(){return e([1,2,3])}});t=e(t),expect(t.next()).toEqual(1),expect(t.next()).toEqual(2),expect(t.next()).toEqual(3),expect(function(){t.next()}).toThrow(),expect(function(){t.next()}).toThrow()}),it("should iterate an iterable",function(){var t=0,n=e({next:function(){if(++t>3)throw new ReturnValue;return t}});expect(n.next()).toEqual(1),expect(n.next()).toEqual(2),expect(n.next()).toEqual(3),expect(function(){n.next()}).toThrow(),expect(function(){n.next()}).toThrow()}),it("should create an iterator from a function",function(){var t=0,n=e(function(){if(++t>3)throw new ReturnValue;return t});expect(n.next()).toEqual(1),expect(n.next()).toEqual(2),expect(n.next()).toEqual(3),expect(function(){n.next()}).toThrow(),expect(function(){n.next()}).toThrow()}),describe("reduce",function(){it("should work",function(){var e=t(),n=0,r=e.reduce(function(t,r,i,s){return expect(r).toBe(n+1),expect(i).toBe(n),expect(s).toBe(e),n++,r+1},0);expect(r).toBe(4)})}),describe("forEach",function(){it("should work",function(){var e=t(),n=0;e.forEach(function(t,r,i){expect(t).toBe(n+1),expect(r).toBe(n),expect(i).toBe(e),n++}),expect(n).toBe(3)})}),describe("map",function(){it("should work",function(){var e=t(),n=0,r=e.map(function(t,r,i){return expect(t).toBe(n+1),expect(r).toBe(n),expect(i).toBe(e),n++,"abc".charAt(r)});expect(r).toEqual(["a","b","c"]),expect(n).toBe(3)})}),describe("filter",function(){it("should work",function(){var e=t(),n=0,r=e.filter(function(t,r,i){return expect(t).toBe(n+1),expect(r).toBe(n),expect(i).toBe(e),n++,t===2});expect(r).toEqual([2]),expect(n).toBe(3)})}),describe("every",function(){it("should work",function(){expect(e([1,2,3]).every(function(e){return e<10})).toBe(!0),expect(e([1,2,3]).every(function(e){return e>1})).toBe(!1)})}),describe("some",function(){it("should work",function(){expect(e([1,2,3]).some(function(e){return e===2})).toBe(!0),expect(e([1,2,3]).some(function(e){return e>10})).toBe(!1)})}),describe("any",function(){[[[!1,!1],!1],[[!1,!0],!0],[[!0,!1],!0],[[!0,!0],!0]].forEach(function(t){t=e(t);var n=t.next(),r=t.next();it("any of "+JSON.stringify(n)+" should be "+r,function(){expect(e(n).any()).toEqual(r)})})}),describe("all",function(){[[[!1,!1],!1],[[!1,!0],!1],[[!0,!1],!1],[[!0,!0],!0]].forEach(function(t){t=e(t);var n=t.next(),r=t.next();it("all of "+JSON.stringify(n)+" should be "+r,function(){expect(e(n).all()).toEqual(r)})})}),describe("min",function(){it("should work",function(){expect(t().min()).toBe(1)})}),describe("max",function(){it("should work",function(){expect(t().max()).toBe(3)})}),describe("sum",function(){it("should work",function(){expect(t().sum()).toBe(6)})}),describe("average",function(){it("should work",function(){expect(t().average()).toBe(2)})}),describe("flatten",function(){it("should work",function(){expect(e([t(),t(),t()]).flatten()).toEqual([1,2,3,1,2,3,1,2,3])})}),describe("zip",function(){it("should work",function(){var e=t().mapIterator(function(e){return e-1}),n=t();expect(e.zip(n)).toEqual([[0,1],[1,2],[2,3]])})}),describe("enumerate",function(){it("should work with default start",function(){var e=t();expect(e.enumerate()).toEqual([[0,1],[1,2],[2,3]])}),it("should work with given start",function(){var e=t();expect(e.enumerate(1)).toEqual([[1,1],[2,2],[3,3]])})}),describe("sorted",function(){it("should work",function(){expect(e([5,2,4,1,3]).sorted()).toEqual([1,2,3,4,5])})}),describe("group",function(){it("should work",function(){expect(e([5,2,4,1,3]).group(function(e){return e%2===0})).toEqual([[!1,[5,1,3]],[!0,[2,4]]])})}),describe("reversed",function(){it("should work",function(){expect(e([5,2,4,1,3]).reversed()).toEqual([3,1,4,2,5])})}),describe("toArray",function(){it("should work",function(){expect(e([5,2,4,1,3]).toArray()).toEqual([5,2,4,1,3])})}),describe("toObject",function(){it("should work",function(){expect(e("AB").toObject()).toEqual({0:"A",1:"B"})})}),describe("mapIterator",function(){it("should work",function(){var e=n().mapIterator(function(e,t,n){return e*2});expect(e.next()).toBe(0),expect(e.next()).toBe(2),expect(e.next()).toBe(4),expect(e.next()).toBe(6)}),it("should pass the correct arguments to the callback",function(){var e=n(),t=e.mapIterator(function(t,n,r){return expect(n).toBe(t),expect(r).toBe(e),t*2});t.next(),t.next(),t.next(),t.next()})}),describe("filterIterator",function(){it("should work",function(){var e=n().filterIterator(function(e,t,n){return expect(t).toBe(e),e%2===0});expect(e.next()).toBe(0),expect(e.next()).toBe(2),expect(e.next()).toBe(4),expect(e.next()).toBe(6)}),it("should pass the correct arguments to the callback",function(){var e=n(),t=e.filterIterator(function(t,n,r){return expect(n).toBe(t),expect(r).toBe(e),t*2});t.next(),t.next(),t.next(),t.next()})}),describe("concat",function(){it("should work",function(){var e=t().concat(t());expect(e.next()).toBe(1),expect(e.next()).toBe(2),expect(e.next()).toBe(3),expect(e.next()).toBe(1),expect(e.next()).toBe(2),expect(e.next()).toBe(3),expect(function(){e.next()}).toThrow()})}),describe("dropWhile",function(){it("should work",function(){var e=n().dropWhile(function(e){return e<10});expect(e.next()).toBe(10),expect(e.next()).toBe(11),expect(e.next()).toBe(12)}),it("should pass the correct arguments to the callback",function(){var e=n(),t=e.dropWhile(function(t,n,r){expect(n).toBe(t),expect(r).toBe(e)});t.next(),t.next(),t.next()})}),describe("takeWhile",function(){it("should work",function(){var e=n().takeWhile(function(e){return e<3});expect(e.next()).toBe(0),expect(e.next()).toBe(1),expect(e.next()).toBe(2),expect(function(){e.next()}).toThrow()}),it("should pass the correct arguments to the callback",function(){var e=n(),t=e.takeWhile(function(t,n,r){return expect(n).toBe(t),expect(r).toBe(e),t<3});t.next(),t.next(),t.next()})}),describe("zipIterator",function(){it("should work",function(){var e=n(),t=n().mapIterator(function(e){return e+1}),r=e.zipIterator(t);expect(r.next()).toEqual([0,1]),expect(r.next()).toEqual([1,2]),expect(r.next()).toEqual([2,3])}),it("should work, even for crazy people",function(){var e=n(),t=e.zipIterator(e,e);expect(t.next()).toEqual([0,1,2]),expect(t.next()).toEqual([3,4,5]),expect(t.next()).toEqual([6,7,8])})}),describe("enumerateIterator",function(){it("should work",function(){var e=n().mapIterator(function(e){return e+1}),t=e.enumerateIterator();expect(t.next()).toEqual([0,1]),expect(t.next()).toEqual([1,2]),expect(t.next()).toEqual([2,3])})})}var Iterator=require("../iterator");describe("Iterator",function(){shouldWorkWithConstructor(function(t){return Iterator(t)}),shouldWorkWithConstructor(function(t){return new Iterator(t)}),describe("Iterator.cycle",function(){it("should work",function(){var e=Iterator.cycle([1,2,3]);for(var t=0;t<10;t++)expect(e.next()).toBe(1),expect(e.next()).toBe(2),expect(e.next()).toBe(3)}),it("should work with specified number of times",function(){var e=Iterator.cycle([1,2,3],2);for(var t=0;t<2;t++)expect(e.next()).toBe(1),expect(e.next()).toBe(2),expect(e.next()).toBe(3);expect(function(){e.next()}).toThrow(),expect(function(){e.next()}).toThrow()}),it("should work with specified 0 times",function(){var e=Iterator.cycle([1,2,3],0);expect(function(){e.next()}).toThrow(),expect(function(){e.next()}).toThrow()}),it("should work with specified -1 times",function(){var e=Iterator.cycle([1,2,3],0);expect(function(){e.next()}).toThrow(),expect(function(){e.next()}).toThrow()})}),describe("Iterator.repeat",function(){it("should repeat a value indefinite times by default",function(){var e=Iterator.repeat(1);for(var t=0;t<10;t++)expect(e.next()).toEqual(1)}),it("should repeat a value specified times",function(){var e=Iterator.repeat(1,3);for(var t=0;t<3;t++)expect(e.next()).toEqual(1);expect(function(){e.next()}).toThrow(),expect(function(){e.next()}).toThrow()})}),describe("Iterator.concat",function(){it("should work",function(){var e=Iterator.concat([Iterator([1,2,3]),Iterator([4,5,6]),Iterator([7,8,9])]);for(var t=0;t<9;t++)expect(e.next()).toEqual(t+1);expect(function(){e.next()}).toThrow(),expect(function(){e.next()}).toThrow()})}),describe("Iterator.chain",function(){it("should work",function(){var e=Iterator.chain(Iterator([1,2,3]),Iterator([4,5,6]),Iterator([7,8,9]));for(var t=0;t<9;t++)expect(e.next()).toEqual(t+1);expect(function(){e.next()}).toThrow(),expect(function(){e.next()}).toThrow()})}),describe("Iterator.unzip",function(){it("should work",function(){var e=Iterator.unzip([Iterator([0,"A","x"]),Iterator([1,"B","y","I"]),Iterator([2,"C"])]);expect(e.next()).toEqual([0,1,2]),expect(e.next()).toEqual(["A","B","C"]),expect(function(){e.next()}).toThrow(),expect(function(){e.next()}).toThrow()})}),describe("Iterator.zip",function(){it("should work",function(){var e=Iterator.zip(Iterator([0,"A","x"]),Iterator([1,"B","y","I"]),Iterator([2,"C"]));expect(e.next()).toEqual([0,1,2]),expect(e.next()).toEqual(["A","B","C"]),expect(function(){e.next()}).toThrow(),expect(function(){e.next()}).toThrow()})}),describe("Iterator.range",function(){}),describe("Iterator.count",function(){})})