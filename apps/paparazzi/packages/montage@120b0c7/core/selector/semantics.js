var AbstractSemantics=require("./abstract-semantics").AbstractSemantics,empty={},Semantics=exports.Semantics=AbstractSemantics.create(AbstractSemantics,{operators:{value:{not:function(e){return!e},startsWith:function(e,t){return e.length>=t.length&&this.equals(e.slice(0,t.length),t)},endsWith:function(e,t){return e.length>=t.length&&this.equals(e.slice(e.length-t.length,e.length),t)},pow:function(e,t){return Math.pow(e,t)},mul:function(e,t){return e*t},div:function(e,t){return e/t},mod:function(e,t){return e%t},add:function(e,t){return e+t},sub:function(e,t){return e-t},lessThan:function(e,t){return Semantics.compare(e,t)<0},lessThanOrEquals:function(e,t){return Semantics.compare(e,t)<=0},greaterThan:function(e,t){return Semantics.compare(e,t)>0},greaterThanOrEquals:function(e,t){return Semantics.compare(e,t)>=0},equals:function(e,t){return e==null||t==null?e===t:e.equals?e.equals(t):t.equals?t.equals(e):e===t},notEquals:function(e,t){return!this.equals(e,t)},xor:function(e,t){return e!==t},contains:function(e,t){return e.indexOf(t)!==-1},has:function(e,t){return e.indexOf(t)!==-1},slice:function(e,t,n){return e.slice(t,n)},sliceFrom:function(e,t,n){var r=e.indexOf(t);return r!==-1?(n=Math.min(e.length-r,n),e.slice(r,r+n)):[]}}},evaluators:{value:{get:function(e,t,n){var r=[];n=n.parents;while(n){if(n.syntax.type!=="get")break;r.push(n.syntax.args[1].value),n=n.parents}return r.length===0?r=null:r=r.join("."),function(n,i,s){var o=e(n,i,s),u=t(n,i,s),a=(o||empty)[u];return s&&s(o,u,a,r),a}},and:function(e,t){return function(n,r){return e(n,r)&&t(n,r)}},or:function(e,t){return function(n,r){return e(n,r)||t(n,r)}},"if":function(e,t,n){return function(r,i){var s=e(r,i);if(s===!0)return t(r,i);if(s===!1)return n(r,i);throw new Error("Expected true or false, got: "+JSON.stringify(s))}},it:function(e,t){return function(n,r){return t(e(n,r),r)}},one:function(e,t){return function(n,r){var i=e(n,r)[0];return t(i,r)}},only:function(e,t){return function(n,r){var i=e(n,r);return i.length!==1?!1:t(i[0],r)}},filter:function(e,t){return function(n,r){return e(n,r).filter(function(e){return t(e,r)})}},every:function(e,t){return function(n,r){return e(n,r).every(function(e){return t(e,r)})}},some:function(e,t){return function(n,r){return e(n,r).some(function(e){return t(e,r)})}},map:function(e,t){return function(n,r){return e(n,r).map(function(e){return t(e,r)})}},sorted:function(e,t,n){var r=this;return function(i,s){var o=n()?-1:1;return e(i,s).map(function(e){return{by:t(e,s),value:e}}).sort(function(e,t){return r.compare(e.by,t.by)*o}).map(function(e){return e.value})}},sum:function(e,t){var n=this;return function(r,i){var r=n.sum(e(r,i));return t(r,i)}},count:function(e,t){var n=this;return function(r,i){var r=n.count(e(r,i));return t(r,i)}},average:function(e,t){var n=this;return function(r,i){var r=n.average(e(r,i));return t(r,i)}},unique:function(e,t){var n=this;return function(r,i){var r=n.unique(e(r,i));return t(r,i)}},flatten:function(e,t){var n=this;return function(r,i){var r=n.flatten(e(r,i));return t(r,i)}}}},compile:{value:function(e,t){var n=this,r={syntax:e,parents:t};if(e.type==="array"){var i=e.terms.map(function(e){return n.compile(e,r)});return function(e,t){return i.map(function(n){return n(e,t)})}}return AbstractSemantics.compile.call(n,e,t)}},compare:{value:function(e,t){if(typeof e!=typeof t)return 0;if(e===t)return 0;if(typeof e=="number")return e-t;if(typeof e=="string")return e<t?-1:1;if(Array.isArray(e)){if(!Array.isArray(t))return 0;var n=Math.min(e.length,t.length);for(var r=0;r<n;r++){var i=this.compare(e[r],t[r]);if(i)return i}return e.length-t.length}return typeof e.compare=="function"?e.compare(t):typeof t.compare=="function"?-t.compare(e):typeof e.lessThan=="function"&&typeof e.equals=="function"?e.equals(t)?0:e.lessThan(t)?-1:1:0}},count:{value:function(e){return typeof e.count=="function"?e.count():e.length}},sum:{value:function(e){return e.reduce(function(e,t){return e+t},0)}},average:{value:function(e){return this.sum(e)/this.count(e)}},unique:{value:function(e){var t=[];return e.forEach(function(e){t.every(function(t){return Semantics.compare(e,t)!==0})&&t.push(e)}),t}},flatten:{value:function(e){return e.reduce(function(e,t){return e.concat(t)},[])}}})