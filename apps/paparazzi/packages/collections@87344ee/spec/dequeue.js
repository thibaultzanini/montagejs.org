function describeDequeue(e){describe("add(value)",function(){it("should be an alias for push",function(){var t=e([1,2,3]);t.add(4),expect(t.toArray()).toEqual([1,2,3,4])})}),describe("push(value)",function(){it("should add one value to the end",function(){var t=e([1,2,3]);t.push(4),expect(t.toArray()).toEqual([1,2,3,4])})}),describe("push(...values)",function(){it("should add many values to the end",function(){var t=e([1,2,3]);t.push(4,5,6),expect(t.toArray()).toEqual([1,2,3,4,5,6])}),it("should add many values to the end variadically",function(){var t=e([1,2,3]);t.push.apply(t,[4,5,6]),expect(t.toArray()).toEqual([1,2,3,4,5,6])})}),describe("unshift(value)",function(){it("should add a value to the beginning",function(){var t=e([1,2,3]);t.unshift(0),expect(t.toArray()).toEqual([0,1,2,3])})}),describe("unshift(...values)",function(){it("should add many values to the beginning",function(){var t=e([1,2,3]);t.unshift(-2,-1,0),expect(t.toArray()).toEqual([-2,-1,0,1,2,3])}),it("should add many values to the beginning",function(){var t=e([1,2,3]);t.unshift.apply(t,[-2,-1,0]),expect(t.toArray()).toEqual([-2,-1,0,1,2,3])})}),describe("pop()",function(){it("should remove one value from the end and return it",function(){var t=e([1,2,3]);expect(t.pop()).toEqual(3),expect(t.toArray()).toEqual([1,2])})}),describe("shift()",function(){it("should remove one value from the beginning and return it",function(){var t=e([1,2,3]);expect(t.shift()).toEqual(1),expect(t.toArray()).toEqual([2,3])})}),describe("concat",function(){it("should concatenate variadic mixed-type collections",function(){var t=e([1,2,3]).concat([4,5,6],e([7,8,9]));expect(t.toArray()).toEqual([1,2,3,4,5,6,7,8,9])})}),describe("slice()",function(){var t=e([1,2,3,4]);it("should slice all values with no arguments",function(){expect(t.slice()).toEqual([1,2,3,4])}),it("should slice all after an index",function(){expect(t.slice(2)).toEqual([3,4])}),it("should slice from the middle by indexed positions",function(){expect(t.slice(1,3)).toEqual([2,3])}),it("should slice from a negative index",function(){expect(t.slice(-2)).toEqual([3,4])}),it("should slice from a negative index to a positive",function(){expect(t.slice(-2,3)).toEqual([3])}),it("should slice from a negative index to a negative",function(){expect(t.slice(-2,-1)).toEqual([3])})}),describe("splice()",function(){it("should do nothing with no arguments",function(){var t=e([1,2,3,4]);expect(t.splice()).toEqual([]),expect(t.toArray()).toEqual([1,2,3,4])}),it("should splice to end with only an offset argument",function(){var t=e([1,2,3,4]);expect(t.splice(2)).toEqual([3,4]),expect(t.toArray()).toEqual([1,2])}),it("should splice nothing with no length",function(){var t=e([1,2,3,4]);expect(t.splice(2,0)).toEqual([]),expect(t.toArray()).toEqual([1,2,3,4])}),it("should splice all values",function(){var t=e([1,2,3,4]);expect(t.splice(0,t.length)).toEqual([1,2,3,4]),expect(t.toArray()).toEqual([])}),it("should splice from negative offset",function(){var t=e([1,2,3,4]);expect(t.splice(-2)).toEqual([3,4]),expect(t.toArray()).toEqual([1,2])}),it("should inject values at a numeric offset",function(){var t=e([1,2,5,6]);expect(t.splice(2,0,3,4)).toEqual([]),expect(t.toArray()).toEqual([1,2,3,4,5,6])}),it("should replace values at a numeric offset",function(){var t=e([1,2,3,6]);expect(t.splice(1,2,4,5)).toEqual([2,3]),expect(t.toArray()).toEqual([1,4,5,6])}),it("should inject values with implied position and length",function(){var t=e([1,2,3,4]);expect(t.splice(null,null,-1,0)).toEqual([]),expect(t.toArray()).toEqual([-1,0,1,2,3,4])}),it("should append values",function(){var t=e([1,2,3,4]);expect(t.splice(4,0,5,6)).toEqual([]),expect(t.toArray()).toEqual([1,2,3,4,5,6])})}),describe("swap()",function(){it("should do nothing with no arguments",function(){var t=e([1,2,3,4]);expect(t.swap()).toEqual([]),expect(t.toArray()).toEqual([1,2,3,4])}),it("should splice to end with only an offset argument",function(){var t=e([1,2,3,4]);expect(t.swap(2)).toEqual([3,4]),expect(t.toArray()).toEqual([1,2])}),it("should splice nothing with no length",function(){var t=e([1,2,3,4]);expect(t.swap(2,0)).toEqual([]),expect(t.toArray()).toEqual([1,2,3,4])}),it("should splice all values",function(){var t=e([1,2,3,4]);expect(t.swap(0,t.length)).toEqual([1,2,3,4]),expect(t.toArray()).toEqual([])}),it("should splice from negative offset",function(){var t=e([1,2,3,4]);expect(t.swap(-2)).toEqual([3,4]),expect(t.toArray()).toEqual([1,2])}),it("should inject values at a numeric offset",function(){var t=e([1,2,5,6]);expect(t.swap(2,0,[3,4])).toEqual([]),expect(t.toArray()).toEqual([1,2,3,4,5,6])}),it("should replace values at a numeric offset",function(){var t=e([1,2,3,6]);expect(t.swap(1,2,[4,5])).toEqual([2,3]),expect(t.toArray()).toEqual([1,4,5,6])}),it("should inject values with implied position and length",function(){var t=e([1,2,3,4]);expect(t.swap(null,null,[-1,0])).toEqual([]),expect(t.toArray()).toEqual([-1,0,1,2,3,4])}),it("should append values",function(){var t=e([1,2,3,4]);expect(t.swap(4,0,[5,6])).toEqual([]),expect(t.toArray()).toEqual([1,2,3,4,5,6])})})}module.exports=describeDequeue