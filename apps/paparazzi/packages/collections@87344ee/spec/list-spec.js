var List=require("../list"),describeDequeue=require("./dequeue"),describeCollection=require("./collection");describe("List",function(){function e(e){return new List(e)}describeDequeue(List),describeDequeue(function(e){return new List(e)}),[List,e].forEach(function(e){describeCollection(e,[1,2,3,4],!0),describeCollection(e,[{id:0},{id:1},{id:2},{id:3}],!0)}),describe("equals",function(){var e=List();it("should be reflexive",function(){expect(e.equals(e)).toBe(!0)}),it("should be better than nothing",function(){expect(e.equals()).toBe(!1)})}),describe("compare",function(){var e=List();it("should be reflexive",function(){expect(e.compare(e)).toBe(0)}),it("should be better than nothing",function(){expect(e.compare()).toBe(1)})}),describe("find",function(){it("should find every value in a list",function(){var e=List([1,2,3,4]);expect(e.find(1)).toBe(e.head.next),expect(e.find(2)).toBe(e.head.next.next),expect(e.find(3)).toBe(e.head.next.next.next),expect(e.find(4)).toBe(e.head.next.next.next.next),expect(e.find(4)).toBe(e.head.prev),expect(e.find(3)).toBe(e.head.prev.prev),expect(e.find(2)).toBe(e.head.prev.prev.prev),expect(e.find(1)).toBe(e.head.prev.prev.prev.prev)}),it("should the first of equivalent values",function(){var e=List([0,1,1,0]);expect(e.find(0)).toBe(e.head.next),expect(e.find(1)).toBe(e.head.next.next)})}),describe("findLast",function(){it("should find every value in a list",function(){var e=List([1,2,3,4]);expect(e.findLast(1)).toBe(e.head.next),expect(e.findLast(2)).toBe(e.head.next.next),expect(e.findLast(3)).toBe(e.head.next.next.next),expect(e.findLast(4)).toBe(e.head.next.next.next.next),expect(e.findLast(4)).toBe(e.head.prev),expect(e.findLast(3)).toBe(e.head.prev.prev),expect(e.findLast(2)).toBe(e.head.prev.prev.prev),expect(e.findLast(1)).toBe(e.head.prev.prev.prev.prev)}),it("should prefer later equivalent values",function(){var e=List([0,1,1,0]);expect(e.findLast(0)).toBe(e.head.prev),expect(e.findLast(1)).toBe(e.head.prev.prev)})}),describe("splice with nodes",function(){it("should splice to end with only an offset argument",function(){var e=List([1,2,3,4]);expect(e.splice(e.find(3))).toEqual([3,4]),expect(e.toArray()).toEqual([1,2])}),it("should splice nothing with no length",function(){var e=List([1,2,3,4]);expect(e.splice(e.find(3),0)).toEqual([]),expect(e.toArray()).toEqual([1,2,3,4])}),it("should splice one value",function(){var e=List([1,2,3,4]);expect(e.splice(e.find(3),1)).toEqual([3]),expect(e.toArray()).toEqual([1,2,4])}),it("should splice all values",function(){var e=List([1,2,3,4]);expect(e.splice(e.head.next,e.length)).toEqual([1,2,3,4]),expect(e.toArray()).toEqual([])}),it("should splice all values with implied length",function(){var e=List([1,2,3,4]);expect(e.splice(e.head.next)).toEqual([1,2,3,4]),expect(e.toArray()).toEqual([])})})})