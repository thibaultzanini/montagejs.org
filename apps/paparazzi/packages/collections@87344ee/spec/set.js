function describeSet(e){describe("uniqueness",function(){var t=e([1,2,3,1,2,3]);expect(t.toArray().sort()).toEqual([1,2,3])}),describe("forEach",function(){it("the callback should receive value, index, set",function(){var t=e([1,2,3]),n=e([]),r=0;t.forEach(function(e,s,o){expect(s).toBe(r++),n.add(e),expect(o).toBe(t)}),expect(n.length).toBe(3),expect(n.union(t).length).toBe(3),expect(n.intersection(t).length).toBe(3),expect(n.difference(t).length).toBe(0)})}),it("should be initially empty",function(){expect((new e).length).toBe(0)}),it("cleared set should be empty",function(){var t=new e([1,2]);expect(t.length).toBe(2),t.delete(1),expect(t.length).toBe(1),t.clear(),expect(t.length).toBe(0)}),it("can add and delete an object",function(){var t=new e,n={};t.add(n),expect(t.has(n)).toBe(!0),t.delete(n),expect(t.length).toBe(0),expect(t.has(n)).toBe(!1)}),it("can add and delete objects from the same bucket",function(){var t={id:0},n={id:1},r=new e;r.add(t),expect(r.has(t)).toBe(!0),r.add(n),expect(r.has(n)).toBe(!0),r.delete(n),expect(r.has(n)).toBe(!1),expect(r.has(t)).toBe(!0),r.delete(t),expect(r.has(t)).toBe(!1)}),it("can readd a deleted object",function(){var t=new e,n={};t.add(n),expect(t.has(n)).toBe(!0),t.add(n),expect(t.length).toBe(1),t.delete(n),expect(t.length).toBe(0),expect(t.has(n)).toBe(!1),t.add(n),expect(t.length).toBe(1),expect(t.has(n)).toBe(!0)}),it("can be changed to an array",function(){var t=new e([0]);expect(t.toArray()).toEqual([0])}),it("is a reducible",function(){var t=new e([1,1,1,2,2,2,1,2]);expect(t.length).toBe(2),expect(t.min()).toBe(1),expect(t.max()).toBe(2),expect(t.sum()).toBe(3),expect(t.average()).toBe(1.5),expect(t.map(function(e){return e+1}).indexOf(3)).toNotBe(-1)}),it("is iterable",function(){var t=new e(["c","b","a"]),n=new Iterator(t);expect(n.toArray().sort()).toEqual(["a","b","c"])}),it("is concatenatable",function(){var t=(new e([3,2,1])).concat([4,5,6]).toArray();t.sort(),expect(t).toEqual([1,2,3,4,5,6])}),it("should compute unions",function(){expect(e([1,2,3]).union([2,3,4]).toArray()).toEqual([1,2,3,4]),expect(e([1,2,3]).union([2,3,4]).equals([1,2,3,4])).toBe(!0)}),it("should compute intersections",function(){expect(e([1,2,3]).intersection([2,3,4]).toArray()).toEqual([2,3])}),it("should compute differences",function(){expect(e([1,2,3]).difference([2,3,4]).toArray()).toEqual([1])}),it("should compute symmetric differences",function(){expect(e([1,2,3]).symmetricDifference([2,3,4]).toArray()).toEqual([1,4])})}var Iterator=require("../iterator");module.exports=describeSet