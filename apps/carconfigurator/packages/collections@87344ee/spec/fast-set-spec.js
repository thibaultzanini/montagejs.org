"use strict";var Set=require("../fast-set"),Iterator=require("../iterator"),TreeLog=require("../tree-log"),describeCollection=require("./collection"),describeSet=require("./set");describe("Set",function(){function e(e){return new Set(e)}[Set,e].forEach(function(e){describeCollection(e,[1,2,3,4],!0),describeCollection(e,[{id:0},{id:1},{id:2},{id:3}],!0),describeSet(e)}),it("can use hash delegate methods",function(){function e(e,t){this.key=e,this.value=t}e.prototype.hash=function(){return""+this.key};var t=new Set;t.add(new e(1,"a")),t.add(new e(3,"b")),t.add(new e(2,"c")),t.add(new e(2,"d")),expect(t.buckets.keys().sort()).toEqual(["1","2","3"])}),it("can iterate with forEach",function(){var e=[!1,null,undefined,0,1,{}],t=new Set(e);t.forEach(function(t){var n=e.indexOf(t);e.splice(n,1)}),expect(e.length).toBe(0)}),it("can iterate with an iterator",function(){var e=new Set([1,2,3,4,5,6]),t=new Iterator(e),n=t.toArray();expect(n).toEqual(e.toArray())}),it("should log",function(){var e=new Set([1,2,3]),t=[];e.log(TreeLog.ascii,null,t.push,t),expect(t).toEqual(["+-+ 1","| '-- 1","+-+ 2","| '-- 2","'-+ 3","  '-- 3"])}),it("should log objects by hash",function(){function e(e){this.value=e}e.prototype.hash=function(){return this.value};var t=new Set([new e(1),new e(1),new e(2),new e(2)]),n=[];t.log(TreeLog.ascii,function(e,t){t(" "+JSON.stringify(e.value))},n.push,n),expect(n).toEqual(["+-+ 1",'| +-- {"value":1}','| \'-- {"value":1}',"'-+ 2",'  +-- {"value":2}','  \'-- {"value":2}'])}),it("should log objects by only one hash",function(){function e(e){this.value=e}e.prototype.hash=function(){return this.value};var t=new Set([new e(1),new e(1)]),n=[];t.log(TreeLog.ascii,null,n.push,n),expect(n).toEqual(["'-+ 1","  +-- {",'  |       "value": 1',"  |   }","  '-- {",'          "value": 1',"      }"])}),describe("should log objects with a custom writer with multiple lines",function(){function e(e){this.value=e}e.prototype.hash=function(){return this.value};var t=new Set([new e(1),new e(1)]),n=[];t.log(TreeLog.ascii,function(e,t,n){n(" . "),t("-+ "+e.value.value),t(" ' ")},n.push,n),["'-+ 1","  |   . ","  +---+ 1","  |   ' ","  |   . ","  '---+ 1","      ' "].forEach(function(e,t){it("line "+t,function(){expect(n[t]).toEqual(e)})})})})