function TestWriter(){W.apply(this,arguments),this.buffer=[],this.written=0}function test(e,t){count++,tests.push([e,t])}function run(){var e=tests.shift();if(!e)return console.error("ok");var t=e[0],n=e[1];console.log("# %s",t),n({same:assert.deepEqual,equal:assert.equal,end:function(){count--,run()}})}var common=require("../common.js"),W=require("../../lib/_stream_writable"),D=require("../../lib/_stream_duplex"),assert=require("assert"),util=require("util");util.inherits(TestWriter,W),TestWriter.prototype._write=function(e,t,n){setTimeout(function(){this.buffer.push(""+e),this.written+=e.length,n()}.bind(this),Math.floor(10*Math.random()))};for(var chunks=Array(50),i=0;chunks.length>i;i++)chunks[i]=Array(i+1).join("x");var tests=[],count=0;process.on("exit",function(){assert.equal(count,0)}),process.nextTick(run),test("write fast",function(e){var t=new TestWriter({highWaterMark:100});t.on("finish",function(){e.same(t.buffer,chunks,"got chunks in the right order"),e.end()}),chunks.forEach(function(e){t.write(e)}),t.end()}),test("write slow",function(e){var t=new TestWriter({highWaterMark:100});t.on("finish",function(){e.same(t.buffer,chunks,"got chunks in the right order"),e.end()});var n=0;(function r(){t.write(chunks[n++]),chunks.length>n?setTimeout(r,10):t.end()})()}),test("write backpressure",function(e){var t=new TestWriter({highWaterMark:50}),n=0;t.on("finish",function(){e.same(t.buffer,chunks,"got chunks in the right order"),e.equal(n,17),e.end()}),t.on("drain",function(){n++});var r=0;(function i(){do var e=t.write(chunks[r++]);while(e!==!1&&chunks.length>r);chunks.length>r?(assert(t._writableState.length>=50),t.once("drain",i)):t.end()})()}),test("write bufferize",function(e){var t=new TestWriter({highWaterMark:100}),n=["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le",void 0];t.on("finish",function(){e.same(t.buffer,chunks,"got the expected chunks")}),chunks.forEach(function(e,r){var i=n[r%n.length];e=new Buffer(e),t.write(e.toString(i),i)}),e.end()}),test("write no bufferize",function(e){var t=new TestWriter({highWaterMark:100,decodeStrings:!1});t._write=function(e,t,n){return assert("string"==typeof e),e=new Buffer(e,t),TestWriter.prototype._write.call(this,e,t,n)};var n=["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le",void 0];t.on("finish",function(){e.same(t.buffer,chunks,"got the expected chunks")}),chunks.forEach(function(e,r){var i=n[r%n.length];e=new Buffer(e),t.write(e.toString(i),i)}),e.end()}),test("write callbacks",function(e){var t=chunks.map(function(e,n){return[n,function(){t._called[n]=e}]}).reduce(function(e,t){return e["callback-"+t[0]]=t[1],e},{});t._called=[];var n=new TestWriter({highWaterMark:100});n.on("finish",function(){process.nextTick(function(){e.same(n.buffer,chunks,"got chunks in the right order"),e.same(t._called,chunks,"called all callbacks"),e.end()})}),chunks.forEach(function(e,r){n.write(e,t["callback-"+r])}),n.end()}),test("end callback",function(e){var t=new TestWriter;t.end(function(){e.end()})}),test("end callback with chunk",function(e){var t=new TestWriter;t.end(new Buffer("hello world"),function(){e.end()})}),test("end callback with chunk and encoding",function(e){var t=new TestWriter;t.end("hello world","ascii",function(){e.end()})}),test("end callback after .write() call",function(e){var t=new TestWriter;t.write(new Buffer("hello world")),t.end(function(){e.end()})}),test("encoding should be ignored for buffers",function(e){var t=new W,n="018b5e9a8f6236ffe30e31baf80d2cf6eb";t._write=function(t){e.equal(t.toString("hex"),n),e.end()};var r=new Buffer(n,"hex");t.write(r,"binary")}),test("writables are not pipable",function(e){var t=new W;t._write=function(){};var n=!1;t.on("error",function(){n=!0}),t.pipe(process.stdout),assert(n),e.end()}),test("duplexes are pipable",function(e){var t=new D;t._read=function(){},t._write=function(){};var n=!1;t.on("error",function(){n=!0}),t.pipe(process.stdout),assert(!n),e.end()}),test("end(chunk) two times is an error",function(e){var t=new W;t._write=function(){};var n=!1;t.on("error",function(t){n=!0,e.equal(t.message,"write after end")}),t.end("this is the end"),t.end("and so is this"),process.nextTick(function(){assert(n),e.end()})});